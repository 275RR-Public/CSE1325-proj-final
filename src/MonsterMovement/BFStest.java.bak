import java.util.ArrayList;
import java.util.List;

import core.Position;
import utils.BFSGrid;
import utils.Constants;

public class BFStest {
    public static void main(String[] args) {
        int rows = Constants.TILE_ROWS;
        int cols = Constants.TILE_COLS;
        
        ArrayList<Position> grid = new ArrayList<>(rows*cols);

        // populate grid
        for(int j = 0; j < cols; j++) {
            for(int i = 0; i < rows; i++) {
                grid.add(j * cols + i, new Position(i, j));
            }
        }

        // set obstacles
        grid.set(20, new Position(0, 1, true));
        grid.set(21, new Position(1, 1, true));
        grid.set(22, new Position(2, 1, true));
        grid.set(23, new Position(3, 1, true));
        grid.set(24, new Position(4, 1, true));
        grid.set(25, new Position(5, 1, true));

        // goals
        Position start = new Position(0,19);
        Position end = new Position(0,0);

        List<Position> path = BFSGrid.findShortestPath(grid, start, end);

        for(var p : path) {
            System.out.println(p);
        }
    }
}
